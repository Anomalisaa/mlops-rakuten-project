volumes:
  shared-volume: {}
  dvc-cache-volume: {}
  postgres-db-volume: {}
  grafana_data: {}
  prometheus_data: {}

services:
  dvc-sync:
    build:
      context: "."
      dockerfile: "./dockerfiles/dvc/Dockerfile"
    volumes:
      - dvc-cache-volume:/app/.dvc/_cache
      - shared-volume:/app/shared-volume
    working_dir: /app
    environment:
      - DAGSHUB_USER_TOKEN=${DAGSHUB_USER_TOKEN}
      - DAGSHUB_REPO_OWNER=${DAGSHUB_REPO_OWNER}
      - DAGSHUB_REPO_NAME=${DAGSHUB_REPO_NAME}
    command: ["dvc", "pull", "shared_volume/data/raw", "shared_volume/data/processed", "shared_volume/data/feedback", "shared_volume/models", "--force"]
  

  preprocessing:
    build:
      context: "."
      dockerfile: "dockerfiles/preprocessing/Dockerfile"
    volumes:
      - .:/app
      - dvc-cache-volume:/app/.dvc/_cache:rw
      - shared-volume:/app/shared-volume
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
    depends_on:
      dvc-sync:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/data_processing/run_preprocessing.py"
  
  model_training:
    build:
      context: .
      dockerfile: dockerfiles/model_training/Dockerfile
    volumes:
      - .:/app
      - dvc-cache-volume:/app/.dvc/_cache:rw
      - shared-volume:/app/shared-volume
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
    depends_on:
      preprocessing:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/model_training/run_model_training.py"
  
  model_validation:
    build:
      context: "."
      dockerfile: "dockerfiles/model_validation/Dockerfile"
    volumes:
      - .:/app
      - dvc-cache-volume:/app/.dvc/_cache:rw
      - shared-volume:/app/shared-volume
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
    depends_on:
      model_training:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/model_validation/run_model_validation.py"

  auth_service:
    build:
      context: "."
      dockerfile: "dockerfiles/auth_service/Dockerfile"
    user: ${AIRFLOW_UID}:${AIRFLOW_GID}
    env_file:
      - .env
    ports:
      - "8001:8001"
    command: ["uvicorn", "plugins.cd4ml.inference.auth_service:auth_app", "--host", "0.0.0.0", "--port", "8001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  predict_service:
    build:
      context: "."
      dockerfile: "dockerfiles/predict_service/Dockerfile"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    ports:
      - "8002:8002"
    volumes:
      - .:/app
      - shared-volume:/app/shared-volume
      - dvc-cache-volume:/app/.dvc/_cache
    working_dir: /app
    depends_on:
      auth_service:
        condition: service_healthy
      dvc-sync:
        condition: service_completed_successfully
    command: ["uvicorn", "plugins.cd4ml.inference.predict_service:predict_app", "--host", "0.0.0.0", "--port", "8002"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8002/health"]
      interval: 30s
      timeout: 5s
      retries: 5
  
  tests:
    build:
      context: .
      dockerfile: dockerfiles/tests/Dockerfile
    volumes:
      - .:/app
      - dvc-cache-volume:/app/.dvc/_cache:rw
      - shared-volume:/app/shared-volume
    working_dir: /app
    env_file:
      - .env
    depends_on:
      model_validation:
        condition: service_completed_successfully
      dvc-sync:
        condition: service_completed_successfully
      auth_service:
        condition: service_healthy
      predict_service:
        condition: service_healthy
    networks:
      - default
    command: >
      sh -c "pytest plugins/cd4ml/tests/test_predict_service.py -v -rA"

 # === AIRFLOW SERVICES ===
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: always

  airflow-webserver:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    user: ${AIRFLOW_UID}:${AIRFLOW_GID}
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__WARN_DEPLOYMENT_EXPOSURE: 'false'
      AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO_OWNER: ${GITHUB_REPO_OWNER}
      GITHUB_REPO_NAME: ${GITHUB_REPO_NAME}
      DAGSHUB_USER_TOKEN: ${DAGSHUB_USER_TOKEN}
      DAGSHUB_REPO_OWNER: ${DAGSHUB_REPO_OWNER}
      DAGSHUB_REPO_NAME: ${DAGSHUB_REPO_NAME}
    volumes:
      - dvc-cache-volume:/opt/airflow/project/.dvc/_cache:rw
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - shared-volume:/opt/airflow/project/shared-volume 
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-compose.yml:/opt/airflow/project/docker-compose.yml:ro  
      - ./:/opt/airflow/project
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    user: ${AIRFLOW_UID}:${AIRFLOW_GID}
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      DOCKER_HOST: ${DOCKER_HOST:-unix:///var/run/docker.sock}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO_OWNER: ${GITHUB_REPO_OWNER}
      GITHUB_REPO_NAME: ${GITHUB_REPO_NAME}
      DAGSHUB_USER_TOKEN: ${DAGSHUB_USER_TOKEN}
      DAGSHUB_REPO_OWNER: ${DAGSHUB_REPO_OWNER}
      DAGSHUB_REPO_NAME: ${DAGSHUB_REPO_NAME}
    volumes:
      - dvc-cache-volume:/opt/airflow/project/.dvc/cache:rw 
      - shared-volume:/opt/airflow/project/shared-volume 
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-compose.yml:/opt/airflow/project/docker-compose.yml:ro 
      - ./:/opt/airflow/project
    command: scheduler
    restart: always

  airflow-init:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    user: ${AIRFLOW_UID}:${AIRFLOW_GID}
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --role Admin --username ${_AIRFLOW_WWW_USER_USERNAME} --email airflow@airflow.com --firstname admin --lastname admin --password ${_AIRFLOW_WWW_USER_PASSWORD}"

    # === MONITORING SERVICES ===

    blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox_exporter
    ports:
      - "9115:9115"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_service
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - auth_service
      - predict_service
      - blackbox-exporter

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager_service
    volumes:
      - ./monitoring/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - "9093:9093"
    depends_on:
      - prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_service
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_LOG_LEVEL: debug
    depends_on:
      - prometheus
      - alertmanager