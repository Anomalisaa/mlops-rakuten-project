services:
  dvc-sync:
    build:
      context: "./dockerfiles/dvc"
      dockerfile: "Dockerfile"
    volumes:
      - .:/app
      - dvc-cache:/app/.dvc/cache
    working_dir: /app
    environment:
      - DAGSHUB_USER_TOKEN=${DAGSHUB_USER_TOKEN}
      - DAGSHUB_REPO_OWNER=${DAGSHUB_REPO_OWNER}
      - DAGSHUB_REPO_NAME=${DAGSHUB_REPO_NAME}
    command: ["dvc", "pull", "--force"]
  
  preprocessing:
    build:
      context: "."
      dockerfile: "dockerfiles/preprocessing/Dockerfile"
    volumes:
      - .:/app
      - dvc-cache:/app/.dvc/cache
      - ./shared_volume:/app/shared_volume  # Mount shared_volume as a whole
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
    depends_on:
      dvc-sync:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/data_processing/run_preprocessing.py"
  
  model_training:
    build:
      context: .
      dockerfile: dockerfiles/model_training/Dockerfile
    volumes:
      - .:/app
      - dvc-cache:/app/.dvc/cache
      - ./shared_volume:/app/shared_volume  # Mount shared_volume as a whole
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
    depends_on:
      preprocessing:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/model_training/run_model_training.py"
  
  model_validation:
    build:
      context: "."
      dockerfile: "dockerfiles/model_validation/Dockerfile"
    volumes:
      - .:/app
      - dvc-cache:/app/.dvc/cache
      - ./shared_volume:/app/shared_volume  # Mount shared_volume as a whole
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
    depends_on:
      model_training:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/model_validation/run_model_validation.py"
  
  tests:
    build:
      context: .
      dockerfile: dockerfiles/tests/Dockerfile
    volumes:
      - .:/app
      - dvc-cache:/app/.dvc/cache
      - ./shared_volume:/app/shared_volume  # Mount shared_volume as a whole
    working_dir: /app
    env_file:
      - .env
    depends_on:
      model_validation:
        condition: service_completed_successfully
      dvc-sync:
        condition: service_completed_successfully
    command: >
      sh -c "dvc pull --force && pytest plugins/cd4ml/tests/test_predict_service.py -v -rA && dvc push"

  auth_service:
    build:
      context: "."
      dockerfile: "dockerfiles/auth_service/Dockerfile"
    env_file:
      - .env
    ports:
      - "8001:8001"
    command: ["uvicorn", "plugins.cd4ml.inference.auth_service:auth_app", "--host", "0.0.0.0", "--port", "8001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  predict_service:
    build:
      context: "."
      dockerfile: "dockerfiles/predict_service/Dockerfile"
    env_file:
      - .env
    ports:
      - "8002:8002"
    volumes:
      - .:/app
      - ./shared_volume:/app/shared_volume  # Mount shared_volume as a whole
      - dvc-cache:/app/.dvc/cache
    working_dir: /app
    env_file:
      - .env
    depends_on:
      auth_service:
        condition: service_healthy
      dvc-sync:
        condition: service_completed_successfully
    command: ["uvicorn", "plugins.cd4ml.inference.predict_service:predict_app", "--host", "0.0.0.0", "--port", "8002"]
  

volumes:
  dvc-cache: