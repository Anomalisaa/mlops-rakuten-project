services:
  dvc-sync:
    build:
      context: "./dockerfiles/dvc"
      dockerfile: "Dockerfile"
    volumes:
      - ./:/workspace
      - dvc-cache:/workspace/.dvc/cache
    working_dir: /workspace
    environment:
      - DAGSHUB_USER_TOKEN=${DAGSHUB_USER_TOKEN}
      - DAGSHUB_REPO_OWNER=${DAGSHUB_REPO_OWNER}
      - DAGSHUB_REPO_NAME=${DAGSHUB_REPO_NAME}
    command: ["dvc", "pull", "--force"]
    
  preprocessing:
    build:
      context: "."
      dockerfile: "dockerfiles/preprocessing/Dockerfile"
    volumes:
      - ./:/workspace                 # DVC config & code
      - dvc-cache:/workspace/.dvc/cache
      - ./shared_volume/data:/data
      - ./shared_volume/models:/models
    working_dir: /workspace
    env_file:
      - .env
    depends_on:
      dvc-sync:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/data_processing/run_preprocessing.py \
      && dvc push"

  model_training:
    build:
      context: "."
      dockerfile: "dockerfiles/model_training/Dockerfile"
    volumes:
      - ./:/workspace
      - dvc-cache:/workspace/.dvc/cache
      - ./shared_volume/data:/app/data
      - ./shared_volume/models:/app/models
    working_dir: /workspace
    depends_on:
      preprocessing:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - MODEL_OUTPUT_DIR=/app/models
      - DATA_INPUT_DIR=/app/data/processed
    command: >
      sh -c "python plugins/cd4ml/model_training/run_model_training.py \
      && dvc push"


  model_validation:
    build:
      context: "."
      dockerfile: "dockerfiles/model_validation/Dockerfile"
    volumes:
      - ./:/workspace
      - dvc-cache:/workspace/.dvc/cache
      - ./shared_volume/data:/app/data
      - ./shared_volume/models:/app/models
    working_dir: /workspace
    env_file:
      - .env
    depends_on:
      model_training:
        condition: service_completed_successfully
    command: >
      sh -c "python plugins/cd4ml/model_validation/run_model_validation.py \
      && dvc push"

  tests:
    build:
      context: "."
      dockerfile: "dockerfiles/tests/Dockerfile"
    volumes:
      - ".:/workspace"                                     
      - "dvc-cache:/workspace/.dvc/cache"                 
      - "./shared_volume/data:/workspace/data"              
      - "./shared_volume/models:/workspace/models"         
      - "./shared_volume/data:/app/data"
      - "./shared_volume/models:/app/models"
    #environment:
    # - DATA_INPUT_DIR=/app/data
    # - MODEL_OUTPUT_DIR=/app/models
    working_dir: /workspace
    env_file:
      - .env
    depends_on:
      model_validation:
        condition: service_completed_successfully
      dvc-sync:
        condition: service_completed_successfully
    command: >
      sh -c "pytest plugins/cd4ml/tests/test_inference.py -v -rA \
      && dvc push"

  inference:
    build:
      context: "."
      dockerfile: "dockerfiles/inference/Dockerfile"
    ports:
      - "8000:8000"
    volumes:
      - ./shared_volume/data:/app/data
      - ./shared_volume/models:/app/models
      - dvc-cache:/workspace/.dvc/cache
    depends_on:
      model_validation:
        condition: service_completed_successfully
      dvc-sync:
        condition: service_completed_successfully
    env_file:
      - .env
    command: ["uvicorn", "plugins.cd4ml.inference.infer:app", "--host", "0.0.0.0", "--port", "8000"]

volumes:
  dvc-cache:
