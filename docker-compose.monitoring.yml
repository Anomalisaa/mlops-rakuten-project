version: '3.8'

volumes:
  shared-volume: {}
  dvc-cache-volume: {}
  #postgres-db-volume: {}
  grafana_data: {}

services:
  dvc-sync:
    build:
      context: "."
      dockerfile: "./dockerfiles/dvc/Dockerfile"
    volumes:
      #- ./.git:/app/.git:ro  # Git repository explizit mounten (read-only)
      - dvc-cache-volume:/app/.dvc/_cache # Named Volume
      - shared-volume:/app/shared-volume # Named volume
    working_dir: /app
    environment:
      - DAGSHUB_USER_TOKEN=${DAGSHUB_USER_TOKEN}
      - DAGSHUB_REPO_OWNER=${DAGSHUB_REPO_OWNER}
      - DAGSHUB_REPO_NAME=${DAGSHUB_REPO_NAME}
    command: ["dvc", "pull", "shared_volume/data/raw", "shared_volume/data/processed", "shared_volume/data/feedback", "shared_volume/models", "--force"]

  auth_service:
    build:
      context: "."
      dockerfile: "dockerfiles/auth_service/Dockerfile"
    env_file:
      - .env
    ports:
      - "8001:8001"
    command: ["uvicorn", "plugins.cd4ml.inference.auth_service:auth_app", "--host", "0.0.0.0", "--port", "8001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  predict_service:
    build:
      context: "."
      dockerfile: "dockerfiles/predict_service/Dockerfile"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    ports:
      - "8002:8002"
    volumes:
      - .:/app
      - shared-volume:/app/shared-volume
      - dvc-cache-volume:/app/.dvc/_cache
    working_dir: /app
    depends_on:
      auth_service:
        condition: service_healthy
      dvc-sync:
        condition: service_completed_successfully
    command: ["uvicorn", "plugins.cd4ml.inference.predict_service:predict_app", "--host", "0.0.0.0", "--port", "8002"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8002/health"]
      interval: 30s
      timeout: 5s
      retries: 5
  
  #drift-monitor:
  #  build:
  #    context: .
  #    dockerfile: dockerfiles/monitoring/Dockerfile
  #  env_file:
  #    - ./.env
  #  volumes:
  #    - ./shared_volume:/app/shared_volume  
  #    - dvc-cache:/app/.dvc/cache           
  #  environment:
  #    PREDICT_URL: http://predict_service:8002/predict
  #    VALIDATION_DATA: /app/shared_volume/data/validation/labels.npy
  #    PUSHGATEWAY_URL: http://pushgateway:9091
  #    BATCH_SIZE: '100'
  #    INTERVAL_SEC: '300'
  #  depends_on:
  #    pushgateway:
  #      condition: service_started
  #    dvc-sync:
  #      condition: service_completed_successfully
  #  networks:
  #    - drift-net

  #pushgateway:
  #  image: prom/pushgateway:latest
  #  container_name: pushgateway_service
  #  ports:
  #    - '9091:9091'
  #  networks:
  #    - drift-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_service
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/:ro
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - auth_service
      - predict_service
    #networks:
    #  - drift-net

  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: alertmanager_service
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - '9093:9093'
    depends_on:
      - prometheus
    #networks:
    #  - drift-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_service
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'
    depends_on:
      - prometheus
      - alertmanager
    #networks:
    #  - drift-net

#networks:
#  drift-net:
#    driver: bridge