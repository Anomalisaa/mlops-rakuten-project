name: Pytest, Build & Push Docker Services

# Avoids concurrency issues by grouping jobs under the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Trigger: push or PR to main, develop, dev_new-feature-githubactions
on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]
  pull_request:
    branches: [ main, develop, dev_new-feature-githubactions ]

env:
  # Docker Hub namespace (one single repo for all images)
  REGISTRY: docker.io
  IMAGE_PREFIX: igurstein/rakuten_dev

jobs:
  # ============================================================================
  # 1) Run pytest tests (on code-level) with DVC Pull (S3-Support)
  # ============================================================================
  pytest-tests:
    name: Run pytest tests (on code-level) with DVC Pull (S3-Support)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies and DVC (S3-Support)
        run: |
          python -m pip install --upgrade pip
          pip install "dvc[s3]"
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f plugins/cd4ml/tests/requirements-dev.txt ]; then pip install -r plugins/cd4ml/tests/requirements-dev.txt; fi

      - name: Pull only required DVC artifacts
        run: |
          dvc pull models/tfidf_vectorizer.pkl
          dvc pull models/sgd_text_model.pkl
          dvc pull models/product_dictionary.pkl

      - name: Run pytest in plugins/cd4ml/tests
        run: |
          pytest plugins/cd4ml/tests --maxfail=1 --disable-warnings -q

  # ============================================================================
  # 2) Build and push dvc-sync Image under single repo (disable DVC pushes via sed)
  # ============================================================================
  dvc-sync:
    name: Build and Push dvc-sync Image (disable DVC pushes via sed)
    runs-on: ubuntu-latest
    #needs: pytest-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/dvc/Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for dvc-sync
        id: meta-dvc
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            dvc-sync
            type=semver,pattern=v*.*.*

      - name: Build & Push dvc-sync Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/dvc/Dockerfile
          push: true
          tags: ${{ steps.meta-dvc.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 3) Build and push preprocessing Image under single repo (disable DVC/MLflow pushes)
  # ============================================================================
  preprocessing:
    name: Build and Push preprocessing Image (disable DVC/MLflow pushes)
    runs-on: ubuntu-latest
    needs: dvc-sync

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC/MLflow pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/preprocessing/Dockerfile || true
          sed -i 's/^RUN .*mlflow artifacts upload.*/# &/g' dockerfiles/preprocessing/Dockerfile || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for preprocessing
        id: meta-preproc
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            preprocessing
            type=semver,pattern=v*.*.*

      - name: Build & Push preprocessing Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/preprocessing/Dockerfile
          push: true
          tags: ${{ steps.meta-preproc.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 4) Build and push model_training Image under single repo (disable DVC/MLflow pushes)
  # ============================================================================
  model_training:
    name: Build and Push model_training Image (disable DVC/MLflow pushes)
    runs-on: ubuntu-latest
    needs: preprocessing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC/MLflow pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/model_training/Dockerfile || true
          sed -i 's/^RUN .*mlflow artifacts upload.*/# &/g' dockerfiles/model_training/Dockerfile || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for model_training
        id: meta-train
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            model-training
            type=semver,pattern=v*.*.*

      - name: Build & Push model_training Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/model_training/Dockerfile
          push: true
          tags: ${{ steps.meta-train.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 5) Build and push model_validation Image under single repo (disable DVC/MLflow pushes)
  # ============================================================================
  model_validation:
    name: Build and Push model_validation Image (disable DVC/MLflow pushes)
    runs-on: ubuntu-latest
    needs: model_training

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC/MLflow pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/model_validation/Dockerfile || true
          sed -i 's/^RUN .*mlflow artifacts upload.*/# &/g' dockerfiles/model_validation/Dockerfile || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for model_validation
        id: meta-validate
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            model-validation
            type=semver,pattern=v*.*.*

      - name: Build & Push model_validation Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/model_validation/Dockerfile
          push: true
          tags: ${{ steps.meta-validate.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 6) Build and push tests Image under single repo
  # ============================================================================
  tests-service:
    name: Build and Push tests Image
    runs-on: ubuntu-latest
    needs: model_validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for tests service
        id: meta-tests
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            tests
            type=semver,pattern=v*.*.*

      - name: Build & Push tests Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/tests/Dockerfile
          push: true
          tags: ${{ steps.meta-tests.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 7) Build and push auth_service Image under single repo
  # ============================================================================
  auth-service:
    name: Build and Push auth_service Image
    runs-on: ubuntu-latest
    needs:
      - model_validation
    # - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for auth_service
        id: meta-auth
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            auth-service
            type=semver,pattern=v*.*.*

      - name: Build & Push auth_service Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/auth_service/Dockerfile
          push: true
          tags: ${{ steps.meta-auth.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 8) Build and push predict_service Image under single repo
  # ============================================================================
  predict-service:
    name: Build and Push predict_service Image
    runs-on: ubuntu-latest
    needs:
      - auth-service
      - model_validation
    #  - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata for predict_service
        id: meta-predict
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            predict-service
            type=semver,pattern=v*.*.*

      - name: Build & Push predict_service Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/predict_service/Dockerfile
          push: true
          tags: ${{ steps.meta-predict.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # 9) Final Job: Build all Docker Compose services from docker-compose.yml together 
  #    (no push, no run, no DVC/MLflow, just checking docker-compose build)
  # ============================================================================
  tests:
    name: Build all Docker Compose services (no run, no DVC/MLflow)
    runs-on: ubuntu-latest
    needs:
      - predict-service
      - model_validation
    # - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfiles used by docker-compose to disable DVC/MLflow and shared_volume copy
        run: |
          # Comment out any DVC/MLflow pulls/pushes & pytest in the test Dockerfile
          sed -i 's/^RUN .*dvc pull.*/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN .*pytest.*/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/model_validation/Dockerfile || true

          # Disable copying shared_volume if missing
          sed -i 's/^RUN cp -R shared_volume\/data/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN cp -R shared_volume\/models/# &/g' dockerfiles/tests/Dockerfile || true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build all Docker Compose services (SKIP actual run)
        run: |
          # Use Docker Compose V2 syntax without running containers
          docker compose build
