name: CI – E2E Test & Conditional Docker Publish

on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]
  pull_request:
    branches: [ main, develop, dev_new-feature-githubactions ]

permissions:
  contents: read

jobs:
  e2e-test:
    name: E2E Tests via Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare .env & shared_volume
        run: |
          touch .env
          mkdir -p shared_volume/data shared_volume/models

      - name: Create CI override (skip DVC & MLflow steps)
        run: |
          cat > docker-compose.ci.yml << 'EOF'
          version: '3.8'
          services:
            dvc-sync:
              command: ["sh", "-c", "echo 'Skipping DVC sync in CI'"]
            preprocessing:
              command: ["sh", "-c", "echo 'Skipping preprocessing in CI'"]
            model_training:
              command: ["sh", "-c", "echo 'Skipping model_training in CI'"]
            model_validation:
              command: ["sh", "-c", "echo 'Skipping model_validation in CI'"]
            tests:
              command: ["sh", "-c", "echo 'Skipping tests in CI'"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build all pipeline images
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            build

      - name: Start auth_service & predict_service
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            up -d auth_service predict_service

      - name: Wait for health endpoints
        run: |
          for port in 8001 8002; do
            for i in {1..10}; do curl -fs "http://127.0.0.1:$port/health" && break || sleep 3; done
          done

      - name: Functional check of /login and /predict
        run: |
          # Login
          TOKEN=$(curl -fs -X POST http://127.0.0.1:8001/login \
            -d "username=admin&password=admin123" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            | jq -r .access_token)
          # Predict
          curl -f -X POST "http://127.0.0.1:8002/predict?token=$TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"designation":"Test","description":"Desc"}'

      - name: Tear down
        if: always()
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            down --volumes --remove-orphans

  detect-changes:
    name: Detect changed pipeline services
    needs: e2e-test
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine changed services
        id: set-services
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          SERVICES=()

          # Für jeden Pipeline-Schritt prüfen wir Dockerfile- oder Code-Änderungen
          if echo "$CHANGED" | grep -qE '^dockerfiles/dvc/'; then               SERVICES+=("dvc"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/preprocessing/|^plugins/cd4ml/data_processing/'; then SERVICES+=("preprocessing"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/model_training/|^plugins/cd4ml/model_training/'; then  SERVICES+=("model_training"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/model_validation/|^plugins/cd4ml/model_validation/'; then  SERVICES+=("model_validation"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/tests/|^plugins/cd4ml/tests/'; then                  SERVICES+=("tests"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/auth_service/|^plugins/cd4ml/inference/auth_service'; then   SERVICES+=("auth_service"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/predict_service/|^plugins/cd4ml/inference/predict_service'; then SERVICES+=("predict_service"); fi

          if [ ${#SERVICES[@]} -eq 0 ]; then
            echo "services=[]" >> $GITHUB_OUTPUT
          else
            ARR=$(printf '"%s",' "${SERVICES[@]}")
            echo "services=[${ARR%,}]" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Build & Push Changed Images
    needs: [ e2e-test, detect-changes ]
    if: ${{ needs.e2e-test.result == 'success' && needs.detect-changes.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: dockerfiles/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            igurstein/rakuten_dev:${{ matrix.service }}-latest
            igurstein/rakuten_dev:${{ matrix.service }}-${{ github.sha }}
