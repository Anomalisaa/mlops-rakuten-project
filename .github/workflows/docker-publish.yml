name: CI & Docker-Publish

on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]
  pull_request:
    branches: [ main, develop, dev_new-feature-githubactions ]

permissions:
  contents: read

jobs:
  e2e-test:
    name: Run full E2E via Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare .env & shared_volume
        run: |
          touch .env
          mkdir -p shared_volume/data shared_volume/models

      - name: Create CI override to skip DVC sync
        run: |
          cat > docker-compose.ci.yml << 'EOF'
          version: '3.8'
          services:
            dvc-sync:
              command: ["sh", "-c", "echo 'Skipping DVC sync in CI'"]
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build entire stack (incl. tests)
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            build

      - name: Run only the tests container
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            run --rm tests

      - name: Tear down any leftover containers
        if: always()
        run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            down --volumes --remove-orphans

  detect-changes:
    name: Detect which pipeline services changed
    needs: e2e-test
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
    steps:
      - name: Fetch full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine changed services
        id: set-services
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          services=()
          # Beispiel für ein paar Services – analog weitermachen …
          if echo "$CHANGED" | grep -qE '^dockerfiles/dvc/'; then           services+=("dvc"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/preprocessing/'; then services+=("preprocessing"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/model_training/'; then services+=("model_training"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/model_validation/'; then services+=("model_validation"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/tests/'; then          services+=("tests"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/auth_service/'; then   services+=("auth_service"); fi
          if echo "$CHANGED" | grep -qE '^dockerfiles/predict_service/'; then services+=("predict_service"); fi

          if [ ${#services[@]} -eq 0 ]; then
            echo "services=[]" >> $GITHUB_OUTPUT
          else
            arr=$(printf '"%s",' "${services[@]}")
            echo "services=[${arr%,}]" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Build & Push Changed Images
    needs: [ e2e-test, detect-changes ]
    if: ${{ needs.e2e-test.result == 'success' && needs.detect-changes.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image for ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: dockerfiles/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            igurstein/rakuten_dev:${{ matrix.service }}-latest
            igurstein/rakuten_dev:${{ matrix.service }}-${{ github.sha }}