name: Pytest, Build & Push Single Docker Services, and Docker Compose Build

# This workflow runs pylint on the Python code first, then pytest tests, builds and pushes Docker images for various services,
# and checks Docker Compose build without running containers.
# It is triggered on pushes or pull requests to the main, develop, or dev_new-feature-githubactions branches.

# Avoids concurrency issues by grouping jobs under the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Trigger: push or PR to main, develop, dev_new-feature-githubactions
on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]
  pull_request:
    branches: [ main, develop, dev_new-feature-githubactions ]

env:
  # Docker Hub namespace
  REGISTRY: docker.io
  IMAGE_PREFIX: igurstein/rakuten_dev

jobs:
  # ============================================================================
  # 1) Lint the Python code with Pylint
  # ============================================================================
  pylint:
    name: Lint Python code with Pylint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for linting
        run: |
          python -m pip

  # ============================================================================
  # 1) Run pytest tests (on code-level) with DVC Pull (S3-Support)
  # ============================================================================
  # pytest-tests:
  #   name: Run pytest tests (on code-level) with DVC Pull (S3-Support)
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.9'

  #     - name: Install Python dependencies and DVC (S3-Support)
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install "dvc[s3]"
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #         if [ -f plugins/cd4ml/tests/requirements-dev.txt ]; then pip install -r plugins/cd4ml/tests/requirements-dev.txt; fi
  #     - name: Pull only required DVC artifacts
  #       run: |
  #         dvc pull models/tfidf_vectorizer.pkl
  #         dvc pull models/sgd_text_model.pkl
  #         dvc pull models/product_dictionary.pkl
  #     - name: Run pytest in plugins/cd4ml/tests
  #       run: |
  #         pytest plugins/cd4ml/tests --maxfail=1 --disable-warnings -q
  # ============================================================================
  # 2) Build and push dvc-sync Image under single repo (disable DVC pushes via sed)
  # ============================================================================
  dvc-sync:
    name: Build and Push dvc-sync Image (disable DVC pushes via sed)
    runs-on: ubuntu-latest
    #needs: pytest-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/dvc/Dockerfile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote dvc-sync image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:dvc-sync || true
      - name: Build local dvc-sync image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:dvc-sync \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:dvc-sync \
            -f dockerfiles/dvc/Dockerfile \
            .
      - name: Compare and push dvc-sync image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:dvc-sync 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:dvc-sync
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:dvc-sync
          else
            echo "dvc-sync image unchanged, skipping push"
          fi
  # ============================================================================
  # 3) Build and push preprocessing Image under single repo (disable DVC/MLflow pushes)
  # ============================================================================
  preprocessing:
    name: Build and Push preprocessing Image (disable DVC/MLflow pushes)
    runs-on: ubuntu-latest
    needs: dvc-sync

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC/MLflow pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/preprocessing/Dockerfile || true
          sed -i 's/^RUN .*mlflow artifacts upload.*/# &/g' dockerfiles/preprocessing/Dockerfile || true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote preprocessing image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:preprocessing || true
      - name: Build local preprocessing image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:preprocessing \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:preprocessing \
            -f dockerfiles/preprocessing/Dockerfile \
            .
      - name: Compare and push preprocessing image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:preprocessing 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:preprocessing
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:preprocessing
          else
            echo "preprocessing image unchanged, skipping push"
          fi
  # ============================================================================
  # 4) Build and push model_training Image under single repo (disable DVC/MLflow pushes)
  # ============================================================================
  model_training:
    name: Build and Push model_training Image (disable DVC/MLflow pushes)
    runs-on: ubuntu-latest
    needs: preprocessing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC/MLflow pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/model_training/Dockerfile || true
          sed -i 's/^RUN .*mlflow artifacts upload.*/# &/g' dockerfiles/model_training/Dockerfile || true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote model-training image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-training || true
      - name: Build local model-training image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-training \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-training \
            -f dockerfiles/model_training/Dockerfile \
            .
      - name: Compare and push model-training image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-training 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-training
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-training
          else
            echo "model-training image unchanged, skipping push"
          fi
  # ============================================================================
  # 5) Build and push model_validation Image under single repo (disable DVC/MLflow pushes)
  # ============================================================================
  model_validation:
    name: Build and Push model_validation Image (disable DVC/MLflow pushes)
    runs-on: ubuntu-latest
    needs: model_training

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfile to disable DVC/MLflow pushes
        run: |
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/model_validation/Dockerfile || true
          sed -i 's/^RUN .*mlflow artifacts upload.*/# &/g' dockerfiles/model_validation/Dockerfile || true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote model-validation image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-validation || true
      - name: Build local model-validation image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-validation \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-validation \
            -f dockerfiles/model_validation/Dockerfile \
            .
      - name: Compare and push model-validation image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-validation 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-validation
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:model-validation
          else
            echo "model-validation image unchanged, skipping push"
          fi

  # ============================================================================
  # 6) Build and push auth_service Image under single repo
  # ============================================================================
  auth-service:
    name: Build and Push auth_service Image
    runs-on: ubuntu-latest
    needs:
      - model_validation
    # - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote auth-service image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:auth-service || true
      - name: Build local auth-service image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:auth-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:auth-service \
            -f dockerfiles/auth_service/Dockerfile \
            .
      - name: Compare and push auth-service image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:auth-service 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:auth-service
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:auth-service
          else
            echo "auth-service image unchanged, skipping push"
          fi
  # ============================================================================
  # 7) Build and push predict_service Image under single repo
  # ============================================================================
  predict-service:
    name: Build and Push predict_service Image
    runs-on: ubuntu-latest
    needs:
      - auth-service
      - model_validation
    #  - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote predict-service image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:predict-service || true
      - name: Build local predict-service image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:predict-service \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:predict-service \
            -f dockerfiles/predict_service/Dockerfile \
            .
      - name: Compare and push predict-service image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:predict-service 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:predict-service
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:predict-service
          else
            echo "predict-service image unchanged, skipping push"
          fi

  # ============================================================================
  # 8) Build and push tests Image under single repo
  # ============================================================================
  tests-service:
    name: Build and Push tests Image
    runs-on: ubuntu-latest
    needs:
      - auth-service
      - model_validation
      - predict-service
    #  - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote tests image if it exists
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:tests || true
      - name: Build local tests image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:tests \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:tests \
            -f dockerfiles/tests/Dockerfile \
            .
      - name: Compare and push tests image only if changed
        run: |
          REMOTE_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:tests 2>/dev/null \
            || echo ""
          )
          LOCAL_DIGEST=$(
            docker inspect --format='{{if .RepoDigests}}{{index .RepoDigests 0}}{{end}}' \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:tests
          )
          if [ "$REMOTE_DIGEST" != "$LOCAL_DIGEST" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:tests
          else
            echo "tests image unchanged, skipping push"
          fi

  # ============================================================================
  # 9) Final Job: Build all Docker Compose services from docker-compose.yml and docker-compose.inference.yml together 
  #    (no push, no run, no DVC/MLflow, just checking docker-compose build)
  # ============================================================================
  tests:
    name: Build all Docker Compose services (no run, no DVC/MLflow)
    runs-on: ubuntu-latest
    #needs:
      #- predict-service
      #- model_validation
      # - tests-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Patch Dockerfiles used by docker-compose to disable DVC/MLflow and shared_volume copy
        run: |
          sed -i 's/^RUN .*dvc pull.*/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN .*pytest.*/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN .*dvc push.*/# &/g' dockerfiles/model_validation/Dockerfile || true
          sed -i 's/^RUN cp -R shared_volume\/data/# &/g' dockerfiles/tests/Dockerfile || true
          sed -i 's/^RUN cp -R shared_volume\/models/# &/g' dockerfiles/tests/Dockerfile || true
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build all Docker Compose services (SKIP actual run)
        run: |
          docker compose build
      - name: Build inference‐only Docker Compose services (SKIP actual run)
        run: |
          docker compose -f docker-compose.inference.yml build