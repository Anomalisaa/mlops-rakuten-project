name: Build & Push Docker Services

# Verhindert Doppel-Runs und bricht Ã¤ltere Builds ab, sobald ein neuer startet
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Trigger for main and develop branches
# This workflow builds and pushes Docker images for various services in a machine learning pipeline.
# and just for testing the dev_new-feature-githubactions branch as well, will be dropped after testing.
on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]
  pull_request:
    branches: [ main, develop, dev_new-feature-githubactions ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # 1) dvc-sync
  dvc-sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-dvc-sync
          tags: |
            type=ref,event=branch
            type=semver,pattern=v*.*.*

      - name: Build & push dvc-sync image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/dvc/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 2) preprocessing (nach dvc-sync)
  preprocessing:
    runs-on: ubuntu-latest
    needs: dvc-sync
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-preprocessing
          tags: |
            type=ref,event=branch
            type=semver,pattern=v*.*.*

      - name: Build & push preprocessing image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/preprocessing/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 3) model_training (after preprocessing)
  model_training:
    runs-on: ubuntu-latest
    needs: preprocessing
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-model-training
          tags: |
            type=ref,event=branch
            type=semver,pattern=v*.*.*

      - name: Build & push model_training image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/model_training/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 4) model_validation (after model_training)
  model_validation:
    runs-on: ubuntu-latest
    needs: model_training
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-model-validation
          tags: |
            type=ref,event=branch
            type=semver,pattern=v*.*.*

      - name: Build & push model_validation image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: dockerfiles/model_validation/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 5) tests (after model_validation)
  tests:
    runs-on: ubuntu-latest
    needs: model_validation
    steps:
      - uses: actions/checkout@v4

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull required images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-dvc-sync:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-model-validation:latest

      - name: Run tests via Docker Compose
        run: docker-compose run --rm tests
