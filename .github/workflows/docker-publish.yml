name: Pytest, Build & Push Single Docker Services, and Docker Compose Build

# This workflow runs CodeQL, Pytest, builds and pushes Docker images for various services (via a matrix),
# and checks Docker Compose builds (via a matrix) without running containers.
# It is triggered on pushes or pull requests to the main, develop, or dev_new-feature-githubactions branches.

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]
  pull_request:
    branches: [ main, develop, dev_new-feature-githubactions ]

env:
  # Docker Hub namespace
  REGISTRY: docker.io
  IMAGE_PREFIX: igurstein/rakuten_dev

jobs:
  # ============================================================================
  # 1) CodeQL Security & Quality Analysis 
  # ============================================================================
  codeql-analyze:
    name: CodeQL Advanced Analyse
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: python
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'Du hast build-mode="manual" gewählt – hier die Kommandos zum Bauen einfügen'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # ============================================================================
  # 2) Run Pytest Tests (ignoring test_predict_service.py)
  # ============================================================================
  pytest-tests:
    name: Run pytest tests (ignoring test_predict_service.py)
    needs: codeql-analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt', 'plugins/cd4ml/tests/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install pandas numpy pyyaml nltk mlflow
          # Download NLTK stopwords
          python -c "import nltk; nltk.download('stopwords')"
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f plugins/cd4ml/tests/requirements-dev.txt ]; then pip install -r plugins/cd4ml/tests/requirements-dev.txt; fi

      - name: Check Pytest installation
        run: |
          which pytest || echo "Pytest not found!"
          pytest --version

      - name: Run pytest in repository (ignoring test_predict_service.py)
        run: |
          pytest . --maxfail=1 --disable-warnings -q \
            --ignore=tests/test_predict_service.py \
            --ignore=plugins/cd4ml/tests/test_predict_service.py

  # ============================================================================
  # 3) Build & Push Services using a Matrix
  #    Includes Docker layer caching
  # ============================================================================
  build-and-push-services:
    name: Build & Push Services
    needs:
      - pytest-tests
      - codeql-analyze
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: dvc-sync
            dockerfile: dockerfiles/dvc/Dockerfile
            tag: dvc-sync
          - name: preprocessing
            dockerfile: dockerfiles/preprocessing/Dockerfile
            tag: preprocessing
          - name: model-training
            dockerfile: dockerfiles/model_training/Dockerfile
            tag: model-training
          - name: model-validation
            dockerfile: dockerfiles/model_validation/Dockerfile
            tag: model-validation
          - name: auth-service
            dockerfile: dockerfiles/auth_service/Dockerfile
            tag: auth-service
          - name: predict-service
            dockerfile: dockerfiles/predict_service/Dockerfile
            tag: predict-service
          - name: tests
            dockerfile: dockerfiles/tests/Dockerfile
            tag: tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /home/runner/.docker/registry-v2
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remote image (cache) for ${{ matrix.service.name }}
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ matrix.service.tag }} || true

      - name: Build and Push ${{ matrix.service.name }} image
        run: |
          docker build \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ matrix.service.tag }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ matrix.service.tag }} \
            -f ${{ matrix.service.dockerfile }} \
            .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ matrix.service.tag }}

  # ============================================================================
  # 4) Final Job: Build all Docker Compose services via Matrix (no Push, no Run)
  # ============================================================================
  compose-build:
    name: Build Docker Compose services (Matrix)
    runs-on: ubuntu-latest
    needs: build-and-push-services

    strategy:
      matrix:
        compose-file:
          - file: docker-compose.yml
            label: "Full Compose"
          - file: docker-compose.inference.yml
            label: "Inference-Only"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build services from ${{ matrix.label }}
        run: |
          docker compose -f ${{ matrix.compose-file }} build
