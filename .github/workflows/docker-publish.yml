name: CI/CD: Test, Build & Push Docker Images

# Ensure only one concurrent run per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Trigger on pushes to main, develop, and our test branch
on:
  push:
    branches: [ main, develop, dev_new-feature-githubactions ]

env:
  IMAGE_NAME: igurstein/rakuten_dev          
  TAG: ${{ github.sha }}                     # immutable commit-specific tag

jobs:
  # 1) Run pure-Python unit tests in a venv
  test-venv:
    name: Run unit tests in virtualenv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Create & activate venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest suite
        run: |
          source .venv/bin/activate
          pytest -q

  # 2) Rebuild only those Docker services whose code changed
  rebuild-images:
    name: Build changed Docker service images
    needs: test-venv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine changed services
        id: services
        run: |
          # List top-level directories changed in the last commit
          CHANGED=$(git diff --name-only ${{ github.sha }} ${{ github.sha }}^ \
            | cut -d/ -f1 \
            | sort -u \
            | grep -E '^(dockerfiles|plugins|services|dvc-sync|preprocessing|model_training|model_validation|tests|auth_service|predict_service)$' \
            || echo "")
          # Map changed dirs to compose service names
          SERVICES=""
          for D in $CHANGED; do
            case "$D" in
              dockerfiles/dvc)       SERVICES="$SERVICES dvc-sync";;
              dockerfiles/preprocessing) SERVICES="$SERVICES preprocessing";;
              dockerfiles/model_training) SERVICES="$SERVICES model_training";;
              dockerfiles/model_validation) SERVICES="$SERVICES model_validation";;
              dockerfiles/tests)     SERVICES="$SERVICES tests";;
              dockerfiles/auth_service) SERVICES="$SERVICES auth_service";;
              dockerfiles/predict_service) SERVICES="$SERVICES predict_service";;
            esac
          done
          # If none matched, build all
          if [ -z "$SERVICES" ]; then
            echo "No service-specific changes detected; building all."
            echo "::set-output name=list::"
          else
            echo "Building these services:$SERVICES"
            echo "::set-output name=list::$SERVICES"
          fi

      - name: Build changed images
        run: |
          if [ -z "${{ steps.services.outputs.list }}" ]; then
            docker compose build
          else
            docker compose build ${{ steps.services.outputs.list }}
          fi

  # 3) Push rebuilt images to DockerHub
  push-image:
    name: Push images to DockerHub (dev & SHA tags)
    needs: rebuild-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push images
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:dev
            ${{ env.IMAGE_NAME }}:${{ env.TAG }}